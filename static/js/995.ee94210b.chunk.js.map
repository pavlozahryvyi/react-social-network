{"version":3,"file":"static/js/995.ee94210b.chunk.js","mappings":"gKACA,G,QAA0B,0BAA1B,EAAkE,8BAAlE,EAAgH,+BCAhH,EAA0B,yB,SCW1B,EARuC,SAAHA,GAAmB,IAAdC,EAAOD,EAAPC,QACrC,OACIC,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAeC,UAC3BH,EAAAA,EAAAA,KAAA,OAAAG,SAAMJ,KAGlB,E,UCTA,EAA6D,2BCe7D,EAXyC,SAAHD,GAAoB,IAAfM,EAAEN,EAAFM,GAAIC,EAAIP,EAAJO,KAErCC,EAAI,YAAAC,OAAeH,GAEzB,OACIJ,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAcC,UAC1BH,EAAAA,EAAAA,KAACQ,EAAAA,GAAO,CAACC,GAAIH,EAAKH,SAAEE,KAGhC,ECbA,EAAwC,0CAAxC,EAAkG,kCAAlG,EAA+I,6B,uCC8BzIK,GAAsBC,EAAAA,EAAAA,GAAwB,CAACC,KAxBjC,cAwBQD,EApB6D,SAAHb,GAAwB,IAAnBe,EAAYf,EAAZe,aACvF,OACIC,EAAAA,EAAAA,MAAA,QAAMC,SAAUF,EAAcZ,UAAWC,EAA6BC,SAAA,EAClEH,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAqBC,UACjCH,EAAAA,EAAAA,KAACgB,EAAAA,EAAK,CACFC,UAAWC,EAAAA,EACXb,KAAM,aACNc,KAAM,OACNC,YAAa,cACbC,SAAUC,EAAAA,OAElBtB,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAgBC,UAC5BH,EAAAA,EAAAA,KAAA,UAAAG,UACIH,EAAAA,EAAAA,KAAA,OAAKuB,I,6zEAAcC,IAAK,kBAK5C,IAuBA,EAV6C,SAAHC,GAAsB,IAAjBC,EAAUD,EAAVC,WAO3C,OAAO1B,EAAAA,EAAAA,KAACU,EAAmB,CAACK,SALX,SAACY,GACdC,QAAQC,IAAIF,EAASG,MACrBJ,EAAWC,EAASG,KACxB,GAGJ,ECRA,EA9B4C,SAAHhC,GAGW,IAFHiC,EAAWjC,EAAXiC,YACAL,EAAU5B,EAAV4B,WAGtCM,EAA4BD,EAA5BC,WAAYC,EAAgBF,EAAhBE,aAGbC,EAAkBF,EAAWG,KAAI,SAAAC,GAAM,OAAIpC,EAAAA,EAAAA,KAACqC,EAAU,CAAiBhC,KAAM+B,EAAO/B,KAAMD,GAAIgC,EAAOhC,IAAzCgC,EAAOhC,GAAuC,IAE1GkC,EAAmBL,EAAaE,KAAI,SAAAI,GAAW,OAAIvC,EAAAA,EAAAA,KAACwC,EAAO,CACCzC,QAASwC,EAAYxC,SADhBwC,EAAYnC,GACc,IAEjG,OACIU,EAAAA,EAAAA,MAAA,OAAKb,UAAWC,EAAeC,SAAA,EAC3BH,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAoBC,SAE/B+B,KAGLpB,EAAAA,EAAAA,MAAA,OAAKb,UAAWC,EAAqBC,SAAA,CAEhCmC,GAEDtC,EAAAA,EAAAA,KAACyC,EAAU,CAACf,WAAYA,SAIxC,E,oBCnBA,GALyBgB,E,QAAAA,IACrBC,EAAAA,GACAC,EAAAA,EAAAA,KAToB,SAACC,GACrB,MAAO,CACHd,YAAac,EAAMd,YACnBe,OAAQD,EAAME,KAAKD,OAE3B,GAI6B,CAACpB,WAAYsB,EAAAA,EAAAA,aAFjBN,CAGvBO,E","sources":["webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://my-app/./src/components/Dialogs/Message/Message.module.css?72d0","components/Dialogs/Message/Message.tsx","webpack://my-app/./src/components/Dialogs/DialogItem/DialogItem.module.css?beb9","components/Dialogs/DialogItem/DialogItem.tsx","webpack://my-app/./src/components/Dialogs/NewMessage/NewMessage.module.css?5d76","components/Dialogs/NewMessage/NewMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__XLaEU\",\"dialogsBlock\":\"Dialogs_dialogsBlock__iZueo\",\"messagesBlock\":\"Dialogs_messagesBlock__k9ySu\"};","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__n5vZ2\"};","import React from \"react\";\r\nimport styles from './Message.module.css';\r\nimport {MessageType} from \"../../../types/types\";\r\n\r\nconst Message: React.FC<MessageType> = ({message}) => {\r\n    return (\r\n        <div className={styles.message}>\r\n            <div>{message}</div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Message;","// extracted by mini-css-extract-plugin\nexport default {\"active\":\"DialogItem_active__Nb1BF\",\"dialog\":\"DialogItem_dialog__5nGjb\"};","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport styles from './DialogItem.module.css';\r\nimport {DialogType} from \"../../../types/types\";\r\n\r\nconst DialogItem: React.FC<DialogType> = ({id, name}) => {\r\n\r\n    const path = `/dialogs/${id}`;\r\n\r\n    return (\r\n        <div className={styles.dialog}>\r\n            <NavLink to={path}>{name}</NavLink>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default DialogItem;","// extracted by mini-css-extract-plugin\nexport default {\"createNewMessageBlock\":\"NewMessage_createNewMessageBlock__oARqR\",\"textareaBlock\":\"NewMessage_textareaBlock__aqIk9\",\"btnBlock\":\"NewMessage_btnBlock__FP+27\"};","import React, {Component} from \"react\";\r\nimport styles from './NewMessage.module.css';\r\nimport sendImg from \"./../../../img/paper-plane-1.png\"\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {requiredField} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\nconst NEW_MESSAGE = \"newMessage\";\r\n\r\ntype PropTypes = {}\r\n\r\nconst NewMessageForm: React.FC<InjectedFormProps<FormDataType, PropTypes> & PropTypes> = ({handleSubmit}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit} className={styles.createNewMessageBlock}>\r\n            <div className={styles.textareaBlock}>\r\n                <Field\r\n                    component={Textarea}\r\n                    name={\"newMessage\"}\r\n                    type={\"text\"}\r\n                    placeholder={\"New message\"}\r\n                    validate={requiredField}/>\r\n            </div>\r\n            <div className={styles.btnBlock}>\r\n                <button>\r\n                    <img src={sendImg} alt={'sendIMG'}/>\r\n                </button>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nconst NewMessageReduxForm = reduxForm<FormDataType>({form: NEW_MESSAGE})(NewMessageForm);\r\n\r\ntype FormDataType = {\r\n    text: string\r\n}\r\ntype FormDataTypeKeys = Extract<keyof FormDataType, string>;\r\n\r\ntype NewMessageType = {\r\n    addMessage: (data: string) => void\r\n}\r\n\r\nconst NewMessage: React.FC<NewMessageType> = ({addMessage}) => {\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        console.log(formData.text);\r\n        addMessage(formData.text);\r\n    };\r\n\r\n    return <NewMessageReduxForm onSubmit={onSubmit}/>\r\n}\r\n\r\nexport default NewMessage;","import React from \"react\";\r\nimport styles from './Dialogs.module.css';\r\nimport Message from \"./Message/Message\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport NewMessage from \"./NewMessage/NewMessageForm\";\r\nimport {DialogPageType} from \"../../types/types\";\r\n\r\ntype DialogsPropsType = {\r\n    dialogsPage: DialogPageType,\r\n    addMessage: (text: string) => void\r\n}\r\n\r\nconst Dialogs: React.FC<DialogsPropsType> = ({\r\n                                                 dialogsPage,\r\n                                                 addMessage\r\n                                             }) => {\r\n\r\n    const {dialogData, messagesData} = dialogsPage;\r\n\r\n    //arrays of components\r\n    const dialogsElements = dialogData.map(dialog => <DialogItem key={dialog.id} name={dialog.name} id={dialog.id}/>);\r\n\r\n    const messagesElements = messagesData.map(messageItem => <Message key={messageItem.id}\r\n                                                                      message={messageItem.message}/>);\r\n\r\n    return (\r\n        <div className={styles.dialogs}>\r\n            <div className={styles.dialogsBlock}>\r\n\r\n                {dialogsElements}\r\n\r\n            </div>\r\n            <div className={styles.messagesBlock}>\r\n\r\n                {messagesElements}\r\n\r\n                <NewMessage addMessage={addMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport {dialogsActions} from \"../../redux/dialogsReducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport WithAuthRedirect from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {RootState} from \"../../redux/redux-store\";\r\n\r\n\r\nconst mapStateToProps = (state: RootState) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n};\r\n\r\nconst DialogsContainer = compose<React.ComponentType>(\r\n    WithAuthRedirect,\r\n    connect(mapStateToProps, {addMessage: dialogsActions.addMessage})\r\n)(Dialogs);\r\n\r\nexport default DialogsContainer;"],"names":["_ref","message","_jsx","className","styles","children","id","name","path","concat","NavLink","to","NewMessageReduxForm","reduxForm","form","handleSubmit","_jsxs","onSubmit","Field","component","Textarea","type","placeholder","validate","requiredField","src","alt","_ref2","addMessage","formData","console","log","text","dialogsPage","dialogData","messagesData","dialogsElements","map","dialog","DialogItem","messagesElements","messageItem","Message","NewMessage","compose","WithAuthRedirect","connect","state","isAuth","auth","dialogsActions","Dialogs"],"sourceRoot":""}